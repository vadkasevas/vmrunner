"use strict";var _interopRequireDefault3 = require("@babel/runtime/helpers/interopRequireDefault");var _interopRequireDefault2 = _interopRequireDefault3(require("@babel/runtime/helpers/interopRequireDefault"));Object.defineProperty(exports, "__esModule", { value: true });var _typeof2 = require("@babel/runtime/helpers/typeof");var _typeof = (0, _interopRequireDefault2["default"])(_typeof2)["default"];exports.





































getLogFunction = getLogFunction;exports.











































































































































handleLabeledStatement = handleLabeledStatement;exports["default"] =























































































































































































































function (babel) {
  return {
    visitor: {
      Program: function Program(program, _ref3) {var opts = _ref3.opts;
        program.traverse({
          LabeledStatement: function LabeledStatement(path) {
            handleLabeledStatement(babel, path, opts);
          } });


        if (!program.vmRunnerWrapper) {
          program.vmRunnerWrapper = true;
          var wrapped = wrapVmRunner({
            BODY: program.node.body,
            VM_RUNNER_RUN_ID: babel.types.identifier('VM_RUNNER_RUN_ID'),
            VM_RUNNER_HASH: babel.types.identifier('VM_RUNNER_HASH'),
            VM_RUNNER_TRACE: babel.types.identifier('VM_RUNNER_TRACE') });


          program.replaceWith(
          babel.types.program(wrapped));

        }
        program.node.directives = [];

      } } };


};var _path = require("path");var fspath = (0, _interopRequireDefault2["default"])(_path)["default"];var _underscore = require("underscore");var _ = (0, _interopRequireDefault2["default"])(_underscore)["default"];var _template = require("@babel/template");var template = (0, _interopRequireDefault2["default"])(_template)["default"];var _lodash = require("lodash");var get = _lodash.get;var $handled = Symbol('handled');var $normalized = Symbol('normalized');var PRESERVE_CONTEXTS = normalizeEnv(process.env.TRACE_CONTEXT);var PRESERVE_FILES = normalizeEnv(process.env.TRACE_FILE);var PRESERVE_LEVELS = normalizeEnv(process.env.TRACE_LEVEL); /**
ormalize an environment variable, used to override plugin options.
function normalizeEnv(input) {if (!input) {return [];}return input.split(',').map(function (context) {return context.toLowerCase().trim();}).filter(function (id) {return id;});} /**
ike `template()` but returns an expression, not an expression statement.
function expression(input, template) {var fn = template(input);return function (ids) {var node = fn(ids);return node.expression ? node.expression : node;};} /**
he default log() function.
function getLogFunction(_ref, logLevel) {var t = _ref.types,template = _ref.template;return function log(message, metadata) {var messageExpression = message.messageExpression;var prefix = "".concat(metadata.context, ":");if (metadata.indent) {prefix += new Array(metadata.indent + 1).join('  ');}if (t.isSequenceExpression(message.content)) {return t.callExpression(t.memberExpression(t.identifier('console'), t.identifier(logLevel)), [t.stringLiteral(prefix)].concat(message.content.expressions));} else {var LINE = metadata.path.node.loc.start.line;return expression("VM_RUNNER_TRACE.apply({line:LINE},[LOGLEVEL, PREFIX, MESSAGE,  DATA])", template)({ LOGLEVEL: t.stringLiteral(logLevel), PREFIX: t.stringLiteral(prefix), DATA: message.content, LINE: t.numericLiteral(LINE), VM_RUNNER_TRACE: t.identifier('VM_RUNNER_TRACE'), MESSAGE: messageExpression });}};}function generatePrefix(dirname, basename) {if (basename !== 'index') {return basename;}basename = fspath.basename(dirname);if (basename !== 'src' && basename !== 'lib') {return basename;}return fspath.basename(fspath.dirname(dirname));} /**
ollect the metadata for a given node path, which will be
made available to logging functions.
function collectMetadata(path, opts) {var filename = fspath.resolve(process.cwd(), path.hub.file.opts.filename);var dirname = fspath.dirname(filename);var extname = fspath.extname(filename);var basename = fspath.basename(filename, extname);var prefix = generatePrefix(dirname, basename);var names = [];var indent = 0;var parent;var parentName = path.getAncestry().slice(1).reduce(function (parts, item) {if (item.isClassMethod()) {if (!parent) {parent = item;}parts.unshift(item.node.key.type === 'Identifier' ? item.node.key.name : '[computed method]');} else if (item.isClassDeclaration()) {if (!parent) {parent = item;}parts.unshift(item.node.id ? item.node.id.name : "[anonymous class@".concat(item.node.loc.start.line, "]"));} else if (item.isFunction()) {if (!parent) {parent = item;}parts.unshift(item.node.id && item.node.id.name || "[anonymous@".concat(item.node.loc.start.line, "]"));} else if (item.isProgram()) {if (!parent) {parent = item;}} else if (!parent && !item.isClassBody() && !item.isBlockStatement()) {indent++;}return parts;}, []).join(':');var hasStartMessage = false;var isStartMessage = false;if (parent && !parent.isProgram()) {var _iteratorNormalCompletion = true;var _didIteratorError = false;var _iteratorError = undefined;try {for (var _iterator = parent.get('body').get('body')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {var child = _step.value;if (child.node[$handled]) {hasStartMessage = true;break;}if (!child.isLabeledStatement()) {break;}var label = child.get('label');if (opts.aliases[label.node.name]) {hasStartMessage = true;if (child.node === path.node) {isStartMessage = true;}break;}}} catch (err) {_didIteratorError = true;_iteratorError = err;} finally {try {if (!_iteratorNormalCompletion && _iterator["return"] != null) {_iterator["return"]();}} finally {if (_didIteratorError) {throw _iteratorError;}}}}var context = "".concat(prefix, ":").concat(parentName);return { indent: indent, prefix: prefix, parentName: parentName, context: context, hasStartMessage: hasStartMessage, isStartMessage: isStartMessage, filename: filename, dirname: dirname, basename: basename, extname: extname, path: path };} /**
etermine whether the given logging statement should be stripped.
function shouldStrip(name, metadata, _ref2) {var strip = _ref2.strip;switch (_typeof(strip)) {case 'boolean':if (!strip) return false; // strip === true
      break;case 'object':var se = strip[name];if (!se || _typeof(se) === 'object' && !se[process.env.NODE_ENV]) return false; // strip[name] === true || strip[name][env] === true
      break;default:return false;}if (PRESERVE_CONTEXTS.length) {var context = metadata.context.toLowerCase();if (PRESERVE_CONTEXTS.some(function (pc) {return context.includes(pc);})) return false;}if (PRESERVE_FILES.length) {var filename = metadata.filename.toLowerCase();if (PRESERVE_FILES.some(function (pf) {return filename.includes(pf);})) return false;}if (PRESERVE_LEVELS.length) {var level = name.toLowerCase();if (PRESERVE_LEVELS.some(function (pl) {return level === pl;})) return false;}return true;}function handleLabeledStatement(babel, path, opts) {var t = babel.types;var label = path.get('label');opts = function normalizeOpts(babel, opts) {if (opts[$normalized]) {return opts;}if (!opts.aliases) {opts.aliases = { log: getLogFunction(babel, 'log'), trace: getLogFunction(babel, 'trace'), warn: getLogFunction(babel, 'warn') };} else {Object.keys(opts.aliases).forEach(function (key) {if (typeof opts.aliases[key] === 'string' && opts.aliases[key]) {var expr = expression(opts.aliases[key], babel.template);opts.aliases[key] = function (message) {return expr(message);};}});}if (opts.strip === undefined) {opts.strip = { log: { production: true }, trace: false, warn: { production: true } };}opts[$normalized] = true;return opts;}(babel, opts);var labelName = label.node.name;var variables = [];var methodPath = get(path, 'parentPath.parentPath', null);if (methodPath && ['ClassMethod', 'ObjectMethod'].indexOf(methodPath.type) > -1 && !methodPath.node["static"]) {variables.push('this');}_.each(path.scope.bindings, function (val, key) {if (variables.indexOf(key) == -1) variables.push(key);});var alias = opts.aliases[labelName];if (!alias) {return;}var metadata = collectMetadata(path, opts);if (shouldStrip(label.node.name, metadata, opts)) {path.remove();return;}path.traverse({ "EmptyStatement": function EmptyStatement(emptyStatement) {var properties = _.map(variables, function (varName) {var key = t.Identifier(varName);var value;if (varName != 'this') {value = t.Identifier(varName);} else {value = t.thisExpression();}return t.objectProperty(key, value, false);});var replacement = t.objectExpression(properties);replacement[$handled] = true;emptyStatement.replaceWith(replacement);}, /*"TemplateLiteral|StringLiteral"(item){
},*/"VariableDeclaration|Function|AssignmentExpression|UpdateExpression|YieldExpression|ReturnStatement": function VariableDeclarationFunctionAssignmentExpressionUpdateExpressionYieldExpressionReturnStatement(item) {throw path.buildCodeFrameError("Logging statements cannot have side effects. ".concat(item.type));}, ExpressionStatement: function ExpressionStatement(statement) {if (statement.node[$handled]) {return;}var targetNode = statement.get('expression').node;var messageElements = [];if (targetNode.type === 'SequenceExpression') {var properties = _.chain(targetNode.expressions).map(function (expressionNode) {if (['Identifier', 'ThisExpression'].indexOf(expressionNode.type) > -1) {var varName = expressionNode.type === 'Identifier' ? expressionNode.name : 'this';var key = t.Identifier(varName);var value;if (expressionNode.type === 'Identifier') {value = t.Identifier(varName);} else {value = t.thisExpression();}return t.objectProperty(key, value, false);} else if (['StringLiteral', 'TemplateLiteral'].indexOf(expressionNode.type) > -1) {messageElements.push(expressionNode);}}).compact().value();if (_.isEmpty(properties) && !_.isEmpty(messageElements)) {var _properties = _.map(variables, function (varName) {var key = t.Identifier(varName);var value;if (varName != 'this') {value = t.Identifier(varName);} else {value = t.thisExpression();}return t.objectProperty(key, value, false);});targetNode = t.objectExpression(_properties);} else targetNode = t.objectExpression(properties);} else if (['TemplateLiteral', 'StringLiteral'].indexOf(targetNode.type) > -1) {messageElements.push(targetNode);var _properties2 = _.map(variables, function (varName) {var key = t.Identifier(varName);var value;if (varName != 'this') {value = t.Identifier(varName);} else {value = t.thisExpression();}return t.objectProperty(key, value, false);});targetNode = t.objectExpression(_properties2);}var messageExpression = t.callExpression(t.memberExpression(t.arrayExpression(messageElements), //object
      t.identifier('join'), //property
      false //computed
      ), [t.stringLiteral(' ')]);var message = { messageExpression: messageExpression, prefix: t.stringLiteral(metadata.prefix), content: targetNode, hasStartMessage: t.booleanLiteral(metadata.hasStartMessage), isStartMessage: t.booleanLiteral(metadata.isStartMessage), indent: t.numericLiteral(metadata.indent), parentName: t.stringLiteral(metadata.parentName), filename: t.stringLiteral(metadata.filename), dirname: t.stringLiteral(metadata.dirname), basename: t.stringLiteral(metadata.basename), extname: t.stringLiteral(metadata.extname) };var replacement = t.expressionStatement(alias(message, metadata));replacement[$handled] = true;statement.replaceWith(replacement);} });if (path.node) {if (path.get('body').isBlockStatement()) {path.replaceWithMultiple(path.get('body').node.body);} else {path.replaceWith(path.get('body').node);}}}var wrapVmRunner = template("\nvar VM_RUNNER_RUN_ID = '';\n\nfunction generateUid(){\n    var u='',i=0; var four = 4;\n    var pattern = 'xxxxxxxx-xxxx-'+four+'xxx-yxxx-xxxxxxxxxxxx';\n    while(i++<36) {\n        var c=pattern[i-1],\n        r=Math.random()*16|0,v=c=='x'?r:(r&0x3|0x8);\n        u+=(c=='-'||c==four)?c:v.toString(16)\n    }\n    return u;\n} \n\nif( typeof(vm2Options)==='undefined' ){\n  vm2Options = {};\n}\nvar VM_RUNNER_HASH = vm2Options.VM_RUNNER_HASH;\n\nvar customOptions = vm2Options.customOptions || {};\nvar traceOptions = customOptions.trace||{};\n\nvar VM_RUNNER_TRACE = function(logLevel,prefix,message,data){\n    var alias = traceOptions && traceOptions.aliases && traceOptions.aliases[logLevel] ;\n    var expression = (typeof vm2Options )!=='undefined' ? vm2Options.expression : null;\n    var messageObj = {\n        frame:vmCodeFrame(expression,this.line),\n        prefix:prefix,\n        message:message,\n        logLevel:logLevel,\n        data:data,\n        line:this.line,\n        date:new Date()\n    }\n    if( alias ){\n        return alias.apply(this,[messageObj]);\n    }\n};\n\n\n\nreturn (function vmRunnerWrapper() {\n    VM_RUNNER_RUN_ID = generateUid();\n    \n    BODY;\n}).apply(this);\n");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,